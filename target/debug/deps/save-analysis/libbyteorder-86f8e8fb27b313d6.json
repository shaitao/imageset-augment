{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[15426798955630555480,519408064267339911]},"crate_root":"/home/zhang/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.3/src","external_crates":[{"file_name":"/home/zhang/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6046355664359651485,8019317904245726114]}},{"file_name":"/home/zhang/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7815101698501615915,7269057560512426664]}},{"file_name":"/home/zhang/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.3/src/lib.rs","num":3,"id":{"name":"alloc","disambiguator":[6488192985416488746,4334068749110286993]}},{"file_name":"/home/zhang/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.3/src/lib.rs","num":4,"id":{"name":"std_unicode","disambiguator":[6239878433378224093,4725150213046474651]}},{"file_name":"/home/zhang/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.3/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[3654356015412279335,6542799514095247760]}},{"file_name":"/home/zhang/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[11413161404991323142,16701209680428503050]}},{"file_name":"/home/zhang/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10745761987360861240,10200100914005756373]}},{"file_name":"/home/zhang/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.3/src/lib.rs","num":8,"id":{"name":"compiler_builtins","disambiguator":[959187132073715980,12093721138903202214]}},{"file_name":"/home/zhang/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.3/src/lib.rs","num":9,"id":{"name":"alloc_jemalloc","disambiguator":[1760574447609064231,794097210815675550]}},{"file_name":"/home/zhang/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.3/src/lib.rs","num":10,"id":{"name":"panic_unwind","disambiguator":[8824402873655609231,16758565762683860168]}}],"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":98798,"line_start":1,"line_end":3160,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2476,"byte_end":2488,"line_start":77,"line_end":77,"column_start":14,"column_end":26},"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2490,"byte_end":2503,"line_start":77,"line_end":77,"column_start":28,"column_end":41},"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":98798,"line_start":1,"line_end":3160,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/zhang/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-1.2.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":22},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":136},{"krate":0,"index":340},{"krate":0,"index":368},{"krate":0,"index":366},{"krate":0,"index":362},{"krate":0,"index":358},{"krate":0,"index":354},{"krate":0,"index":350},{"krate":0,"index":346},{"krate":0,"index":342},{"krate":0,"index":234},{"krate":0,"index":238},{"krate":0,"index":372},{"krate":0,"index":400},{"krate":0,"index":398},{"krate":0,"index":394},{"krate":0,"index":390},{"krate":0,"index":386},{"krate":0,"index":382},{"krate":0,"index":378},{"krate":0,"index":374},{"krate":0,"index":240},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":300}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers\nin either [big-endian or little-endian order].","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2171,"byte_end":2193,"line_start":64,"line_end":64,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":99679,"byte_end":99691,"line_start":28,"line_end":28,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::io::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82}],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":100486,"byte_end":100493,"line_start":53,"line_end":53,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::io::ReadBytesExt::read_u8","value":"fn (&mut self) -> Result<u8>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":101404,"byte_end":101411,"line_start":83,"line_end":83,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::io::ReadBytesExt::read_i8","value":"fn (&mut self) -> Result<i8>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":102240,"byte_end":102248,"line_start":110,"line_end":110,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::io::ReadBytesExt::read_u16","value":"fn <T> (&mut self) -> Result<u16>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":103105,"byte_end":103113,"line_start":137,"line_end":137,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::io::ReadBytesExt::read_i16","value":"fn <T> (&mut self) -> Result<i16>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":103905,"byte_end":103913,"line_start":163,"line_end":163,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::io::ReadBytesExt::read_u24","value":"fn <T> (&mut self) -> Result<u32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":104703,"byte_end":104711,"line_start":189,"line_end":189,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::io::ReadBytesExt::read_i24","value":"fn <T> (&mut self) -> Result<i32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":105509,"byte_end":105517,"line_start":215,"line_end":215,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::io::ReadBytesExt::read_u32","value":"fn <T> (&mut self) -> Result<u32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":106313,"byte_end":106321,"line_start":241,"line_end":241,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::io::ReadBytesExt::read_i32","value":"fn <T> (&mut self) -> Result<i32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":107157,"byte_end":107165,"line_start":267,"line_end":267,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::io::ReadBytesExt::read_u64","value":"fn <T> (&mut self) -> Result<u64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":107975,"byte_end":107983,"line_start":293,"line_end":293,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::io::ReadBytesExt::read_i64","value":"fn <T> (&mut self) -> Result<i64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":110664,"byte_end":110673,"line_start":376,"line_end":376,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::io::ReadBytesExt::read_uint","value":"fn <T> (&mut self, nbytes: usize) -> Result<u64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":111503,"byte_end":111511,"line_start":401,"line_end":401,"column_start":8,"column_end":16},"name":"read_int","qualname":"::io::ReadBytesExt::read_int","value":"fn <T> (&mut self, nbytes: usize) -> Result<i64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":113132,"byte_end":113140,"line_start":450,"line_end":450,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::io::ReadBytesExt::read_f32","value":"fn <T> (&mut self) -> Result<f32>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":114083,"byte_end":114091,"line_start":481,"line_end":481,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::io::ReadBytesExt::read_f64","value":"fn <T> (&mut self) -> Result<f64>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":115132,"byte_end":115145,"line_start":513,"line_end":513,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::io::ReadBytesExt::read_u16_into","value":"fn <T> (&mut self, dst: &mut [u16]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":116275,"byte_end":116288,"line_start":548,"line_end":548,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::io::ReadBytesExt::read_u32_into","value":"fn <T> (&mut self, dst: &mut [u32]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":117477,"byte_end":117490,"line_start":586,"line_end":586,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::io::ReadBytesExt::read_u64_into","value":"fn <T> (&mut self, dst: &mut [u64]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":119912,"byte_end":119925,"line_start":663,"line_end":663,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::io::ReadBytesExt::read_i16_into","value":"fn <T> (&mut self, dst: &mut [i16]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":121051,"byte_end":121064,"line_start":698,"line_end":698,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::io::ReadBytesExt::read_i32_into","value":"fn <T> (&mut self, dst: &mut [i32]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":122249,"byte_end":122262,"line_start":736,"line_end":736,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::io::ReadBytesExt::read_i64_into","value":"fn <T> (&mut self, dst: &mut [i64]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":124854,"byte_end":124867,"line_start":819,"line_end":819,"column_start":8,"column_end":21},"name":"read_f32_into","qualname":"::io::ReadBytesExt::read_f32_into","value":"fn <T> (&mut self, dst: &mut [f32]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":126368,"byte_end":126391,"line_start":868,"line_end":868,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::io::ReadBytesExt::read_f32_into_unchecked","value":"fn <T> (&mut self, dst: &mut [f32]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":127625,"byte_end":127638,"line_start":907,"line_end":907,"column_start":8,"column_end":21},"name":"read_f64_into","qualname":"::io::ReadBytesExt::read_f64_into","value":"fn <T> (&mut self, dst: &mut [f64]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":129438,"byte_end":129461,"line_start":962,"line_end":962,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::io::ReadBytesExt::read_f64_into_unchecked","value":"fn <T> (&mut self, dst: &mut [f64]) -> Result<()>","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Extends [`Read`] with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":130513,"byte_end":130526,"line_start":996,"line_end":996,"column_start":11,"column_end":24},"name":"WriteBytesExt","qualname":"::io::WriteBytesExt","value":"WriteBytesExt: io::Write","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114}],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":130971,"byte_end":130979,"line_start":1008,"line_end":1008,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::io::WriteBytesExt::write_u8","value":"fn (&mut self, n: u8) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":131478,"byte_end":131486,"line_start":1023,"line_end":1023,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::io::WriteBytesExt::write_i8","value":"fn (&mut self, n: i8) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":131859,"byte_end":131868,"line_start":1035,"line_end":1035,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::io::WriteBytesExt::write_u16","value":"fn <T> (&mut self, n: u16) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":132312,"byte_end":132321,"line_start":1049,"line_end":1049,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::io::WriteBytesExt::write_i16","value":"fn <T> (&mut self, n: i16) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":132768,"byte_end":132777,"line_start":1063,"line_end":1063,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::io::WriteBytesExt::write_u24","value":"fn <T> (&mut self, n: u32) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":133221,"byte_end":133230,"line_start":1077,"line_end":1077,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::io::WriteBytesExt::write_i24","value":"fn <T> (&mut self, n: i32) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":133677,"byte_end":133686,"line_start":1091,"line_end":1091,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::io::WriteBytesExt::write_u32","value":"fn <T> (&mut self, n: u32) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":134130,"byte_end":134139,"line_start":1105,"line_end":1105,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::io::WriteBytesExt::write_i32","value":"fn <T> (&mut self, n: i32) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":134586,"byte_end":134595,"line_start":1119,"line_end":1119,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::io::WriteBytesExt::write_u64","value":"fn <T> (&mut self, n: u64) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":135039,"byte_end":135048,"line_start":1133,"line_end":1133,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::io::WriteBytesExt::write_i64","value":"fn <T> (&mut self, n: i64) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":136237,"byte_end":136247,"line_start":1170,"line_end":1170,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::io::WriteBytesExt::write_uint","value":"fn <T> (&mut self, n: u64, nbytes: usize) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":136936,"byte_end":136945,"line_start":1193,"line_end":1193,"column_start":8,"column_end":17},"name":"write_int","qualname":"::io::WriteBytesExt::write_int","value":"fn <T> (&mut self, n: i64, nbytes: usize) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":138508,"byte_end":138517,"line_start":1244,"line_end":1244,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::io::WriteBytesExt::write_f32","value":"fn <T> (&mut self, n: f32) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":138797,"byte_end":138806,"line_start":1253,"line_end":1253,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::io::WriteBytesExt::write_f64","value":"fn <T> (&mut self, n: f64) -> Result<()>","parent":{"krate":0,"index":86},"children":[],"decl_id":null,"docs":" Extends [`Write`] with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4266,"byte_end":4272,"line_start":170,"line_end":170,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Sealed stops crates other than byteorder from implementing any traits\n that use it.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5520,"byte_end":5529,"line_start":210,"line_end":210,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder: Clone + Copy + Debug + Default + Eq + Hash + Ord + PartialEq + PartialOrd +\nprivate::Sealed","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232}],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5764,"byte_end":5772,"line_start":219,"line_end":219,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"fn (buf: &[u8]) -> u16","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6281,"byte_end":6289,"line_start":238,"line_end":238,"column_start":8,"column_end":16},"name":"read_u24","qualname":"::ByteOrder::read_u24","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6822,"byte_end":6830,"line_start":259,"line_end":259,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"fn (buf: &[u8]) -> u32","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7317,"byte_end":7325,"line_start":278,"line_end":278,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"fn (buf: &[u8]) -> u64","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8400,"byte_end":8409,"line_start":318,"line_end":318,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"fn (buf: &[u8], nbytes: usize) -> u64","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9521,"byte_end":9530,"line_start":358,"line_end":358,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"fn (buf: &mut [u8], n: u16) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10047,"byte_end":10056,"line_start":377,"line_end":377,"column_start":8,"column_end":17},"name":"write_u24","qualname":"::ByteOrder::write_u24","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10601,"byte_end":10610,"line_start":398,"line_end":398,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"fn (buf: &mut [u8], n: u32) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11105,"byte_end":11114,"line_start":417,"line_end":417,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"fn (buf: &mut [u8], n: u64) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12244,"byte_end":12254,"line_start":457,"line_end":457,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"fn (buf: &mut [u8], n: u64, nbytes: usize) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13420,"byte_end":13428,"line_start":498,"line_end":498,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"fn (buf: &[u8]) -> i16","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13992,"byte_end":14000,"line_start":520,"line_end":520,"column_start":8,"column_end":16},"name":"read_i24","qualname":"::ByteOrder::read_i24","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14545,"byte_end":14553,"line_start":542,"line_end":542,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"fn (buf: &[u8]) -> i32","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15103,"byte_end":15111,"line_start":564,"line_end":564,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"fn (buf: &[u8]) -> i64","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16303,"byte_end":16311,"line_start":610,"line_end":610,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"fn (buf: &[u8], nbytes: usize) -> i64","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17609,"byte_end":17617,"line_start":657,"line_end":657,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"fn (buf: &[u8]) -> f32","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18237,"byte_end":18245,"line_start":680,"line_end":680,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"fn (buf: &[u8]) -> f64","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18818,"byte_end":18827,"line_start":702,"line_end":702,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"fn (buf: &mut [u8], n: i16) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19403,"byte_end":19412,"line_start":724,"line_end":724,"column_start":8,"column_end":17},"name":"write_i24","qualname":"::ByteOrder::write_i24","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19969,"byte_end":19978,"line_start":746,"line_end":746,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"fn (buf: &mut [u8], n: i32) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20540,"byte_end":20549,"line_start":768,"line_end":768,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"fn (buf: &mut [u8], n: i64) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21804,"byte_end":21813,"line_start":814,"line_end":814,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"fn (buf: &mut [u8], n: i64, nbytes: usize) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23176,"byte_end":23185,"line_start":861,"line_end":861,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"fn (buf: &mut [u8], n: f32) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23834,"byte_end":23843,"line_start":885,"line_end":885,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"fn (buf: &mut [u8], n: f64) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24618,"byte_end":24631,"line_start":911,"line_end":911,"column_start":8,"column_end":21},"name":"read_u16_into","qualname":"::ByteOrder::read_u16_into","value":"fn (src: &[u8], dst: &mut [u16]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":25311,"byte_end":25324,"line_start":934,"line_end":934,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::ByteOrder::read_u32_into","value":"fn (src: &[u8], dst: &mut [u32]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":26004,"byte_end":26017,"line_start":957,"line_end":957,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::ByteOrder::read_u64_into","value":"fn (src: &[u8], dst: &mut [u64]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":27435,"byte_end":27448,"line_start":1005,"line_end":1005,"column_start":8,"column_end":21},"name":"read_i16_into","qualname":"::ByteOrder::read_i16_into","value":"fn (src: &[u8], dst: &mut [i16]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":28302,"byte_end":28315,"line_start":1034,"line_end":1034,"column_start":8,"column_end":21},"name":"read_i32_into","qualname":"::ByteOrder::read_i32_into","value":"fn (src: &[u8], dst: &mut [i32]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":29170,"byte_end":29183,"line_start":1063,"line_end":1063,"column_start":8,"column_end":21},"name":"read_i64_into","qualname":"::ByteOrder::read_i64_into","value":"fn (src: &[u8], dst: &mut [i64]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31010,"byte_end":31033,"line_start":1123,"line_end":1123,"column_start":8,"column_end":31},"name":"read_f32_into_unchecked","qualname":"::ByteOrder::read_f32_into_unchecked","value":"fn (src: &[u8], dst: &mut [f32]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":31954,"byte_end":31977,"line_start":1153,"line_end":1153,"column_start":8,"column_end":31},"name":"read_f64_into_unchecked","qualname":"::ByteOrder::read_f64_into_unchecked","value":"fn (src: &[u8], dst: &mut [f64]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":32820,"byte_end":32834,"line_start":1181,"line_end":1181,"column_start":8,"column_end":22},"name":"write_u16_into","qualname":"::ByteOrder::write_u16_into","value":"fn (src: &[u16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":33515,"byte_end":33529,"line_start":1204,"line_end":1204,"column_start":8,"column_end":22},"name":"write_u32_into","qualname":"::ByteOrder::write_u32_into","value":"fn (src: &[u32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":34210,"byte_end":34224,"line_start":1227,"line_end":1227,"column_start":8,"column_end":22},"name":"write_u64_into","qualname":"::ByteOrder::write_u64_into","value":"fn (src: &[u64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":35633,"byte_end":35647,"line_start":1274,"line_end":1274,"column_start":8,"column_end":22},"name":"write_i16_into","qualname":"::ByteOrder::write_i16_into","value":"fn (src: &[i16], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":36484,"byte_end":36498,"line_start":1302,"line_end":1302,"column_start":8,"column_end":22},"name":"write_i32_into","qualname":"::ByteOrder::write_i32_into","value":"fn (src: &[i32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":37335,"byte_end":37349,"line_start":1330,"line_end":1330,"column_start":8,"column_end":22},"name":"write_i64_into","qualname":"::ByteOrder::write_i64_into","value":"fn (src: &[i64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":39172,"byte_end":39186,"line_start":1390,"line_end":1390,"column_start":8,"column_end":22},"name":"write_f32_into","qualname":"::ByteOrder::write_f32_into","value":"fn (src: &[f32], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40120,"byte_end":40134,"line_start":1421,"line_end":1421,"column_start":8,"column_end":22},"name":"write_f64_into","qualname":"::ByteOrder::write_f64_into","value":"fn (src: &[f64], dst: &mut [u8]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":40875,"byte_end":40889,"line_start":1445,"line_end":1445,"column_start":8,"column_end":22},"name":"from_slice_u16","qualname":"::ByteOrder::from_slice_u16","value":"fn (numbers: &mut [u16]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":41464,"byte_end":41478,"line_start":1464,"line_end":1464,"column_start":8,"column_end":22},"name":"from_slice_u32","qualname":"::ByteOrder::from_slice_u32","value":"fn (numbers: &mut [u32]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":42053,"byte_end":42067,"line_start":1483,"line_end":1483,"column_start":8,"column_end":22},"name":"from_slice_u64","qualname":"::ByteOrder::from_slice_u64","value":"fn (numbers: &mut [u64]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":43278,"byte_end":43292,"line_start":1523,"line_end":1523,"column_start":8,"column_end":22},"name":"from_slice_i16","qualname":"::ByteOrder::from_slice_i16","value":"fn (src: &mut [i16]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44030,"byte_end":44044,"line_start":1548,"line_end":1548,"column_start":8,"column_end":22},"name":"from_slice_i32","qualname":"::ByteOrder::from_slice_i32","value":"fn (src: &mut [i32]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":44782,"byte_end":44796,"line_start":1573,"line_end":1573,"column_start":8,"column_end":22},"name":"from_slice_i64","qualname":"::ByteOrder::from_slice_i64","value":"fn (src: &mut [i64]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46006,"byte_end":46020,"line_start":1611,"line_end":1611,"column_start":8,"column_end":22},"name":"from_slice_f32","qualname":"::ByteOrder::from_slice_f32","value":"fn (numbers: &mut [f32]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46290,"byte_end":46304,"line_start":1618,"line_end":1618,"column_start":8,"column_end":22},"name":"from_slice_f64","qualname":"::ByteOrder::from_slice_f64","value":"fn (numbers: &mut [f64]) -> ()","parent":{"krate":0,"index":136},"children":[],"decl_id":null,"docs":" `ByteOrder` describes types that can serialize integers as bytes.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":340},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46815,"byte_end":46824,"line_start":1638,"line_end":1638,"column_start":10,"column_end":19},"name":"BigEndian","qualname":"::BigEndian","value":"BigEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46806,"byte_end":46827,"line_start":1638,"line_end":1638,"column_start":1,"column_end":22}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46806,"byte_end":46827,"line_start":1638,"line_end":1638,"column_start":1,"column_end":22}}]},{"kind":"Type","id":{"krate":0,"index":238},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47023,"byte_end":47025,"line_start":1649,"line_end":1649,"column_start":10,"column_end":12},"name":"BE","qualname":"::BE","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`BigEndian`].","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":372},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47540,"byte_end":47552,"line_start":1668,"line_end":1668,"column_start":10,"column_end":22},"name":"LittleEndian","qualname":"::LittleEndian","value":"LittleEndian::{}","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47531,"byte_end":47555,"line_start":1668,"line_end":1668,"column_start":1,"column_end":25}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47531,"byte_end":47555,"line_start":1668,"line_end":1668,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":244},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47769,"byte_end":47771,"line_start":1679,"line_end":1679,"column_start":10,"column_end":12},"name":"LE","qualname":"::LE","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" A type alias for [`LittleEndian`].","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":246},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48498,"byte_end":48511,"line_start":1705,"line_end":1705,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":248},"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48825,"byte_end":48837,"line_start":1716,"line_end":1716,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":48783,"byte_end":48815,"line_start":1715,"line_end":1715,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":129721,"byte_end":129722,"line_start":972,"line_end":972,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":139095,"byte_end":139096,"line_start":1262,"line_end":1262,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4302,"byte_end":4314,"line_start":171,"line_end":171,"column_start":28,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4345,"byte_end":4354,"line_start":172,"line_end":172,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46846,"byte_end":46855,"line_start":1640,"line_end":1640,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":236}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47574,"byte_end":47586,"line_start":1670,"line_end":1670,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51078,"byte_end":51087,"line_start":1796,"line_end":1796,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":270},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56807,"byte_end":56819,"line_start":2011,"line_end":2011,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308},{"krate":0,"index":310},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":99697,"byte_end":99701,"line_start":28,"line_end":28,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":4282},"to":{"krate":0,"index":34}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":129721,"byte_end":129722,"line_start":972,"line_end":972,"column_start":45,"column_end":46},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":91},"to":{"krate":0,"index":34}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":130532,"byte_end":130537,"line_start":996,"line_end":996,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":4314},"to":{"krate":0,"index":86}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,105,111,46,114,115],"byte_start":139095,"byte_end":139096,"line_start":1262,"line_end":1262,"column_start":47,"column_end":48},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":141},"to":{"krate":0,"index":86}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4302,"byte_end":4314,"line_start":171,"line_end":171,"column_start":28,"column_end":40},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":372},"to":{"krate":0,"index":130}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4345,"byte_end":4354,"line_start":172,"line_end":172,"column_start":28,"column_end":37},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":340},"to":{"krate":0,"index":130}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5536,"byte_end":5541,"line_start":211,"line_end":211,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":2,"index":2618},"to":{"krate":0,"index":136}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5544,"byte_end":5548,"line_start":211,"line_end":211,"column_start":15,"column_end":19},"kind":"SuperTrait","from":{"krate":2,"index":1780},"to":{"krate":0,"index":136}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5551,"byte_end":5556,"line_start":211,"line_end":211,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":7596},"to":{"krate":0,"index":136}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5559,"byte_end":5566,"line_start":211,"line_end":211,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":2630},"to":{"krate":0,"index":136}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5569,"byte_end":5571,"line_start":211,"line_end":211,"column_start":40,"column_end":42},"kind":"SuperTrait","from":{"krate":2,"index":2436},"to":{"krate":0,"index":136}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5574,"byte_end":5578,"line_start":211,"line_end":211,"column_start":45,"column_end":49},"kind":"SuperTrait","from":{"krate":2,"index":7172},"to":{"krate":0,"index":136}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5581,"byte_end":5584,"line_start":211,"line_end":211,"column_start":52,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2466},"to":{"krate":0,"index":136}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5587,"byte_end":5596,"line_start":211,"line_end":211,"column_start":58,"column_end":67},"kind":"SuperTrait","from":{"krate":2,"index":2430},"to":{"krate":0,"index":136}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5599,"byte_end":5609,"line_start":211,"line_end":211,"column_start":70,"column_end":80},"kind":"SuperTrait","from":{"krate":2,"index":2484},"to":{"krate":0,"index":136}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5625,"byte_end":5631,"line_start":212,"line_end":212,"column_start":16,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":130},"to":{"krate":0,"index":136}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":46846,"byte_end":46855,"line_start":1640,"line_end":1640,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":340},"to":{"krate":2,"index":2630}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":47574,"byte_end":47586,"line_start":1670,"line_end":1670,"column_start":18,"column_end":30},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":372},"to":{"krate":2,"index":2630}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51078,"byte_end":51087,"line_start":1796,"line_end":1796,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":340},"to":{"krate":0,"index":136}},{"span":{"file_name":[47,104,111,109,101,47,122,104,97,110,103,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,121,116,101,111,114,100,101,114,45,49,46,50,46,51,47,115,114,99,47,108,105,98,46,114,115],"byte_start":56807,"byte_end":56819,"line_start":2011,"line_end":2011,"column_start":20,"column_end":32},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":372},"to":{"krate":0,"index":136}}]}